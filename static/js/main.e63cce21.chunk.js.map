{"version":3,"sources":["components/Movie.js","components/MovieList.js","App.js","serviceWorker.js","index.js"],"names":["Movie","movieName","movieCategory","movieDescription","movieBackgroundImage","isMovieDataWindowOpen","openMovieId","openMovieDataWindow","movieListNumber","movieNumberOnList","backgroundImageUrl","filter","image","Object","values","attributes","some","val","includes","label","movieStyle","backgroundImage","Col","md","sm","xs","className","Row","length","slice","onClick","icon","faChevronRight","style","faChevronLeft","MovieList","props","state","movieList","searchTerm","showItems","movieNumberInList","bind","getMovieList","setSearchTerm","showMoreMovieItems","this","axios","get","then","response","setState","data","feed","entry","map","movie","id","movieItem","movieId","catch","error","console","log","event","newSearchTerm","target","value","searchTermLowerCase","toLowerCase","Fragment","type","placeholder","onChange","index","key","category","summary","React","Component","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e63cce21.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faChevronRight } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faChevronLeft } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport const Movie = ({\r\n  movieName,\r\n  movieCategory,\r\n  movieDescription,\r\n  movieBackgroundImage,\r\n  isMovieDataWindowOpen,\r\n  openMovieId,\r\n  openMovieDataWindow,\r\n  movieListNumber,\r\n}) => {\r\n  const movieNumberOnList = movieListNumber + 1;\r\n\r\n  const movieImage = movieBackgroundImage.filter((image) =>\r\n    Object.values(image.attributes).some(\r\n      (val) => typeof val === \"string\" && val.includes(\"170\")\r\n    )\r\n  );\r\n\r\n  var backgroundImageUrl = movieImage[0].label;\r\n\r\n  var movieStyle = {\r\n    backgroundImage: `linear-gradient(0deg, rgba(0, 0, 0, 1), rgba(0, 0, 0, .7)), url(${backgroundImageUrl})`,\r\n  };\r\n\r\n  return (\r\n    <Col md={3} sm={4} xs={12} className=\"movie-item\">\r\n      <Col md={12}>\r\n        <Row>\r\n          <Col>\r\n            <p className=\"movie-item__title\">{movieName}</p>\r\n            <p className=\"movie-item__description\">\r\n              {movieDescription.length > 100\r\n                ? movieDescription.slice(0, 100) + \"...\"\r\n                : movieDescription}{\" \"}\r\n            </p>\r\n            <button\r\n              onClick={() => {\r\n                openMovieDataWindow(movieListNumber);\r\n              }}\r\n              className=\"movie-item__button\"\r\n            >\r\n              read more <FontAwesomeIcon icon={faChevronRight} />\r\n            </button>\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n      <p className=\"movie-item__number\">{movieNumberOnList}</p>\r\n      <Col\r\n        md={12}\r\n        className={\r\n          isMovieDataWindowOpen && openMovieId === movieListNumber\r\n            ? \"movie-item__more-container movie-item__more-container--open\"\r\n            : \"movie-item__more-container\"\r\n        }\r\n        style={movieStyle}\r\n      >\r\n        <Row>\r\n          <Col className=\"movie-item__row p-0\">\r\n            <p className=\"movie-item__category\">{movieCategory}</p>\r\n            <p className=\"movie-item__description\">{movieDescription}</p>\r\n            <button\r\n              onClick={() => {\r\n                openMovieDataWindow(movieListNumber);\r\n              }}\r\n              className=\"movie-item__button\"\r\n            >\r\n              <FontAwesomeIcon icon={faChevronLeft} /> read less\r\n            </button>\r\n          </Col>\r\n        </Row>\r\n      </Col>\r\n    </Col>\r\n  );\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\r\nimport axios from \"axios\";\r\nimport Movie from \"./Movie\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faChevronRight } from \"@fortawesome/free-solid-svg-icons\";\r\nimport \"./../style/css/style.css\";\r\n\r\nclass MovieList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      movieList: [],\r\n      isMovieDataWindowOpen: false,\r\n      openMovieId: null,\r\n      searchTerm: \"\",\r\n      showItems: 8,\r\n      movieNumberInList: 0,\r\n    };\r\n\r\n    this.openMovieDataWindow = this.openMovieDataWindow.bind(this);\r\n    this.getMovieList = this.getMovieList.bind(this);\r\n    this.setSearchTerm = this.setSearchTerm.bind(this);\r\n    this.showMoreMovieItems = this.showMoreMovieItems.bind(this);\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.getMovieList();\r\n  }\r\n\r\n  getMovieList() {\r\n    axios\r\n      .get(\"https://itunes.apple.com/us/rss/topmovies/limit=100/json\")\r\n      .then((response) => {\r\n        this.setState({\r\n          movieList: response.data.feed.entry,\r\n        });\r\n      })\r\n      .then(() => {\r\n        this.state.movieList.map((movie, id) => {\r\n          let movieList = [...this.state.movieList];\r\n          let movieItem = {\r\n            ...movieList[id],\r\n            movieId: this.state.movieNumberInList,\r\n          };\r\n\r\n          movieList[id] = movieItem;\r\n\r\n          this.setState({\r\n            movieList,\r\n            movieNumberInList: this.state.movieNumberInList + 1,\r\n          });\r\n        });\r\n      })\r\n      .catch((error) => console.log(\"Error\" + error));\r\n  }\r\n\r\n  openMovieDataWindow(openMovieId) {\r\n    this.setState({\r\n      isMovieDataWindowOpen: !this.state.isMovieDataWindowOpen,\r\n      openMovieId: openMovieId,\r\n    });\r\n  }\r\n\r\n  setSearchTerm(event) {\r\n    const newSearchTerm = event.target.value;\r\n\r\n    this.setState({\r\n      searchTerm: newSearchTerm,\r\n    });\r\n  }\r\n\r\n  showMoreMovieItems() {\r\n    this.setState({\r\n      showItems:\r\n        this.state.showItems >= this.state.movieList.length\r\n          ? this.state.showItems\r\n          : this.state.showItems + 8,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const searchTerm = this.state.searchTerm;\r\n    if (searchTerm) var searchTermLowerCase = searchTerm.toLowerCase();\r\n\r\n    return (\r\n      <React.Fragment>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Search\"\r\n          value={this.state.searchTerm}\r\n          onChange={this.setSearchTerm}\r\n          className=\"movie-list__search-input\"\r\n        />\r\n        <Row className=\"mx-0\">\r\n          {this.state.searchTerm\r\n            ? this.state.movieList\r\n                .filter(function (movie, index) {\r\n                  const movieLabel = movie[\"im:name\"].label;\r\n                  const movieLabelLowerCase = movieLabel.toLowerCase();\r\n\r\n                  return movieLabelLowerCase.includes(searchTermLowerCase);\r\n                })\r\n                .map((movie, id) => (\r\n                  <Movie\r\n                    key={id}\r\n                    movieName={movie[\"im:name\"].label}\r\n                    movieCategory={movie.category.attributes.label}\r\n                    movieDescription={movie.summary.label}\r\n                    movieBackgroundImage={movie[\"im:image\"]}\r\n                    isMovieDataWindowOpen={this.state.isMovieDataWindowOpen}\r\n                    openMovieId={this.state.openMovieId}\r\n                    openMovieDataWindow={this.openMovieDataWindow}\r\n                    movieListNumber={movie.movieId}\r\n                  />\r\n                ))\r\n            : this.state.movieList\r\n                .slice(0, this.state.showItems)\r\n                .map((movie, id) => (\r\n                  <Movie\r\n                    key={id}\r\n                    movieName={movie[\"im:name\"].label}\r\n                    movieCategory={movie.category.attributes.label}\r\n                    movieDescription={movie.summary.label}\r\n                    movieBackgroundImage={movie[\"im:image\"]}\r\n                    isMovieDataWindowOpen={this.state.isMovieDataWindowOpen}\r\n                    openMovieId={this.state.openMovieId}\r\n                    openMovieDataWindow={this.openMovieDataWindow}\r\n                    movieListNumber={movie.movieId}\r\n                  />\r\n                ))}\r\n        </Row>\r\n        {this.state.searchTerm ? null : (\r\n          <button\r\n            onClick={this.showMoreMovieItems}\r\n            className=\"movie-list__button\"\r\n          >\r\n            Show more <FontAwesomeIcon icon={faChevronRight} />\r\n          </button>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieList;\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Container from \"react-bootstrap/Container\";\nimport MovieList from \"./components/MovieList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container className=\"movie-list\">\n        <h1 className=\"movie-list__header\">Top 100 movies</h1>\n        <p className=\"movie-list__description\">\n          Application showing the list of top 100 movies based on the iTunes\n          json file.\n        </p>\n        <MovieList />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}